# 1. Дан целочисленный массив. Необходимо вывести вначале его элементы с четными индексами, а затем - с нечетными.
def task1
  p a = [1, 2, 3, 4, 5, 6, 7, 8]
  p a.partition.with_index { |v, i| i.even? }.flatten
end

# 5. Дан целочисленный массив. Преобразовать его, прибавив к четным числам первый элемент. 
# Первый и последний элементы массива не изменять.
def task5
  p a = [4, 2, 5, 4, 3, 6, 9, 8]
  p a.map { |i| (i.even? && i != a.first && i != a.last) ? i + a.first : i }
end


# 9. Дан целочисленный массив. Заменить все положительные элементы на значение минимального.
def task9
  p a = [4, -2, 3, 0, 1, -1, 2]
  p a.map { |i| i > 0 ? i = a.min : i }
end

# 13. Дан целочисленный массив. Осуществить циклический сдвиг элементов массива влево на одну позицию.
def task13
  a = [1, 2, 3, 4, 5, 6, 7, 8]
  p a.rotate(1)
end

# 17. Дан целочисленный массив. Найти количество его локальных максимумов.
def task17
  p a = [2, 3, 1, -1, 0, -2, 4]
  p a[1..a.size - 2].select.with_index(1) { |v, i| a[i] > a[i - 1] && a[i] > a[i + 1] }.count
end

# 21. Дан целочисленный массив. Определить количество участков, на которых его элементы монотонно возрастают.
# def task21
#   a = [2, 3, 5, 6, 7, -2, 4, 1, 2, 3]
# end

# 25. Дан целочисленный массив. Преобразовать его, вставив перед каждым положительным элементом нулевой элемент.
def task25
  p a = [-2, 3, -5, 4]
  p a.each_with_object([]) { |i, acc| acc << a.first if i > 0; acc << i; acc }
end

# 29. Дан целочисленный массив. Упорядочить его по возрастанию
def task29
  p a = [4, 2, 5, 1]
  p a.sort
end

# 33. Дан целочисленный массив. Найти индекс минимального элемента.
def task33
  p a = [4, 2, 5, 1]
  p a.index(a.min)
end

# 37. Дан целочисленный массив. Найти индекс последнего минимального элемента
def task37
  p a = [1, 7, -3, 6, -3, 9]
  i = a.reverse.index(a.min)
  p a.size - 1 - i
end

# 41. Дан целочисленный массив. Найти минимальный четный элемент
def task41
  p a = [2, 7, -3, 6, -4, 9]
  p a.select { |i| i.even? }.min
end

# 45. Дан целочисленный массив. Найти минимальный положительный элемент.
def task45
  p a = [2, 7, -3, 6, -4, 9]
  p a.select { |i| i > 0 }.min
end

# 49. Дан целочисленный массив. Найти количество элементов, расположенных перед первым минимальным.
def task49
  p a = [2, 7, -4, 6, -4, 9]
  p a.index(a.min)
end

# 51. Дан целочисленный массив. Найти количество элементов, расположенных после первого максимального.
def task51
  p a = [2, 7, -4, 6, -4, 5]
  max = a.index(a.max)
  p a.size - 1 - max
end

# 53. Дан целочисленный массив. Найти количество элементов, расположенных перед последним максимальным.
def task53
  p a = [2, 7, -4, 7, 3, 4]
  i = a.reverse.index(a.max)
  p a.size - 1 - i 
end


task53


# Поиск в массиве: локальные максимумы
def local_max
  a = [2, 3, 1, -1, 0, -2, 4]
  i = 1
  c = []
  while i < a.size - 1 do
    if a[i] > a[i-1] && a[i] > a[i+1]
      c << a[i]
    end
    i += 1
  end
  p a; p c; p c.count
end

